# Copyright 2023 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Used to invoke clang-tidy on XLA.

Expects to see the output of `bazel aquery --output=jsonproto ...` via stdin,
and expects all targets of listed in aquery to have been build beforehand.

Example usage:
  bazelisk build //xla/...
  bazelisk aquery --output=jsonproto "mnemonic(CppCompile, //xla/...)"
    | python3 build_tools/clang_tidy.py

This would run clang-tidy on all files that need to be compiled to build xla.
"""
import dataclasses
import json
import logging
import subprocess
import sys
from typing import Any

JSONDict = dict[Any, Any]  # Approximates parsed JSON

DISALLOWED_ARGS = {
    "-fno-canonical-system-headers",
}


@dataclasses.dataclass
class ClangTidyCommand:
  """Represents a clang-tidy command with options on a specific file."""

  file: str
  arguments: list[str]

  @classmethod
  def from_args_list(cls, args_list: list[str]) -> "ClangTidyCommand":
    """Alternative constructor which uses the args_list from `bazel aquery`.

    This collects arguments and the file being run on from the output of
    `bazel aquery`. Also filters out arguments which break clang-tidy.

    Arguments:
      args_list: List of arguments generated by `bazel aquery`

    Returns:
      The corresponding ClangTidyCommand.
    """
    cc_file = None
    filtered_args = []

    for arg in args_list:
      if arg in DISALLOWED_ARGS:
        continue

      if arg.endswith(".cc"):
        cc_file = arg

      filtered_args.append(arg)

    return cls(cc_file, filtered_args)

  def to_invocation(self) -> list[str]:
    return ["clang-tidy", self.file, "--", *self.arguments]


def extract_clang_tidy_commands(
    parsed_aquery_output: JSONDict,
) -> list[ClangTidyCommand]:
  actions = parsed_aquery_output["actions"]
  return [
      ClangTidyCommand.from_args_list(action["arguments"]) for action in actions
  ]


def run_commands(commands: list[ClangTidyCommand]) -> None:
  failed = []
  for command in commands:
    sp = subprocess.run(command.to_invocation(), check=False)
    if sp.returncode != 0:
      failed.append(command.file)

  if failed:
    raise RuntimeError(f"clang-tidy commands failed for these files: {failed}")


def main():
  logging.basicConfig()
  logging.getLogger().setLevel(logging.INFO)

  parsed_aquery_output = json.loads(sys.stdin.read())
  commands = extract_clang_tidy_commands(parsed_aquery_output)
  run_commands(commands)


if __name__ == "__main__":
  main()
